# -*- coding: utf-8 -*-
"""Problem_Sheet_5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IVtJS9La9IWfYnCn845hMl41QzoNaZTq
"""

#Cubic Spline Interpolation

from sympy import *
import numpy as np
import math
import matplotlib.pyplot as plt

x = [1,2,3,4]
y = [1,2,5,11]
h = x[1] - x[0]
n = 4

for i in range(1,n-1):
 if (x[i+1] - x[i]) != h:
  print("The data are not equally spaced, we cannot implement Cubic Spline.")

m = []
for i in range(n):
  m.append(symbols(f'm_{i}'))

sub_list = {m[0]:0,m[n-1]: 0}

eq = []
for i in range(1,n-1):
  eq.append((m[i-1] + 4*m[i] + m[i+1]) - ((6*(y[i-1] - 2*y[i] + y[i+1]))/(h*h)))

for i in range(len(eq)):
  eq[i] = eq[i].subs(sub_list)

eq2 = solve((eq[0],eq[1]),m)
m[0] = 0
m[n-1] = 0

j = 1
for i in eq2:
  m[j] = eq2[i]
  j = j + 1

print(f'The solution of M are : {m}')
z = Symbol('z')

f1 = []
def CS():
    f = (pow((x[i+1] - z),3))*(1/(6*h))*(m[i]) + (pow((z - x[i]),3))*(1/(6*h))*(m[i+1]) + (x[i+1] - z)*(1/h)*(y[i] - (h*h)*(1/6)*(m[i])) + (z - x[i])*(1/h)*(y[i+1] - (h*h)*(1/6)*(m[i+1]))
    f1.append(f)
    return f

def CS1(z1):
    f = (pow((x[i+1] - z1),3))*(1/(6*h))*(m[i]) + (pow((z1 - x[i]),3))*(1/(6*h))*(m[i+1]) + (x[i+1] - z1)*(1/h)*(y[i] - (h*h)*(1/6)*(m[i])) + (z1 - x[i])*(1/h)*(y[i+1] - (h*h)*(1/6)*(m[i+1]))
    return f

k = 1
for i in range(n-1):
  global k
  g = CS()
  x3 = np.linspace(x[i],x[i+1],10)
  plt.plot(x3,CS1(x3))
  k = k + 1

print(f'\nThe polynomials are: {f1}')
print(f1[0].subs(z,1.5))
plt.scatter(x,y)

# Lagrange's Interpolation

from sympy import *
z = Symbol('z')
import matplotlib.pyplot as plt
import numpy as np

x = [5,7,11,13,17]
y = [150,392,1452,2366,5202]
n = 5

sum = 0
def g(z):
  global sum
  for i in range(n):
    d = 1
    for j in range(n):
      if i != j:
        d = d * (z - x[j])/(x[i] - x[j])
    sum = sum + (d * y[i])
  return sum

sum1 = 0
def g1(z2):
  global sum1
  for i in range(n):
    d = 1
    for j in range(n):
      if i != j:
        d = d * (z2 - x[j])/(x[i] - x[j])
    sum1 = sum1 + (d * y[i])
  return sum1

z2 = np.linspace(5,17,100)
plt.plot(z2,g1(z2))
plt.scatter(x,y)
print(float(g(z).subs(z,9)))

# Inverse Lagrange's Interpolation

from sympy import *
z = Symbol('z')
import matplotlib.pyplot as plt
import numpy as np

x = [1.2,2.1,2.8,4.1,4.9,6.2]
y = [4.2,6.8,9.8,13.4,15.5,19.6]
n = 6

sum1 = 0
def g1(z2):
  global sum1
  for i in range(n):
    d = 1
    for j in range(n):
      if i != j:
        d = d * (z2 - y[j])/(y[i] - y[j])
    sum1 = sum1 + (d * x[i])
  return sum1

sum = 0
def g(z):
  global sum
  for i in range(n):
    d = 1
    for j in range(n):
      if i != j:
        d = d * (z - y[j])/(y[i] - y[j])
    sum = sum + (d * x[i])
  return sum

z2 = np.linspace(4,20,1000)
plt.plot(z2,g1(z2))
plt.scatter(y,x)

print(float(g(z).subs(z,12)))

#Netwon Forward

from sympy import *
z = Symbol('z')
import numpy as np
import math
import matplotlib.pyplot as plt

#x = [40,50,60,70,80,90]
#y = [31,73,124,159,190,210]

x=[0.01,0.02,0.03,0.04,0.05,0.06]
y=[0.1023,0.1047,0.1071,0.1096,0.1122,0.1148]
y1 = y
n = 6
m = n
h = x[1] - x[0]

p = (z - x[0])/h
p1 = []
p1.append(y[0])

print(f'The Difference Table:')
def difference_table():
  global n,y
  diff_list = []
  for i in range(n-1):
    diff_list.append((y[i+1] - y[i]))
  y = diff_list
  print(f'{y}')
  p1.append(y[0])
  n = n - 1

for i in range(n-1):
  difference_table()

sum = p1[0]
def func():
  global sum
  for i in range(1,m):
    f = 1
    for j in range(i):
      f = f * (p - j)
    f1 = (f/math.factorial(i))*(p1[i])
    sum = sum + f1
  return sum

sum1 = p1[0]
def func1(t):
  p = (t - x[0])/h
  global sum1
  for i in range(1,m):
    f = 1
    for j in range(i):
      f = f * (p - j)
    f1 = (f/math.factorial(i))*(p1[i])
    sum1 = sum1 + f1
  return sum1

print(expand(func()))
x1 = np.linspace(0.01,0.06,100)
plt.plot(x1,func1(x1))
plt.scatter(x,y1)

v = 0.015
print(func().subs(z,v))
#print(func().subs(z,w))

g = func()
g1 = diff(g,z,1)
print(expand(g1))
v1 = 0.0125
#w1 = 41
print(g1.subs(z,v1))
#print(g1.subs(z,w1))
g2 = diff(g,z,2)
print(expand(g2))
print(g2.subs(z,v1))
#print(g2.subs(z,w1))

#Netwon Backward

from sympy import *
z = Symbol('z')
import numpy as np
import math
import matplotlib.pyplot as plt

x = [40,50,60,70,80,90]
y = [31,73,124,159,190,210]
y1 = y
n = 6
m = n
h = x[1] - x[0]

p = (z - x[n-1])/h
p1 = []
p1.append(y[n-1])

print(f'The Difference Table:')
def difference_table():
  global n,y
  diff_list = []
  for i in range(n-1):
    diff_list.append((y[i+1] - y[i]))
  y = diff_list
  print(f'{y}')
  p1.append(y[len(diff_list) - 1])
  n = n - 1

for i in range(n-1):
  difference_table()

sum = p1[0]
def func():
  global sum
  for i in range(1,m):
    f = 1
    for j in range(i):
      f = f * (p + j)
    f1 = (f/math.factorial(i))*(p1[i])
    sum = sum + f1
  return sum

sum1 = p1[0]
def func1(t):
  p = (t - x[m - 1])/h
  global sum1
  for i in range(1,m):
    f = 1
    for j in range(i):
      f = f * (p + j)
    f1 = (f/math.factorial(i))*(p1[i])
    sum1 = sum1 + f1
  return sum1

x1 = np.linspace(40,90,100)
plt.plot(x1,func1(x1))
plt.scatter(x,y1)

v = 84
print(float(func().subs(z,v)))
#print(func().subs(z,w))

g = func()
print(expand(g))
g1 = diff(g,z,1)
v1 = 87
print(expand(g1))
print(float(g1.subs(z,v1)))
#print(g1.subs(z,w1))
g2 = diff(g,z,2)
print(expand(g2))
print(float(g2.subs(z,v1)))
#print(g2.subs(z,w1))