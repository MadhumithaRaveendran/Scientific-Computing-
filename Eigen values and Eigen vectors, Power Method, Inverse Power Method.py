# -*- coding: utf-8 -*-
"""Problem_Sheet_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12NI1RXvynjbwNau2c5OQ00l7uCvn0VQF
"""

# Eigen Value & Eigen Vector using inbuilt function

from sympy import *
mat = Matrix([[1,0,0],[0,3,-1],[0,-1,3]])

count1 = 0
eigVal = mat.eigenvals()
eigVects = mat.eigenvects()
print(eigVal)
print('\n',eigVects)
list1 = []

for key, value in eigVal.items():
    list1.append((key, value))

list2 = sorted(list1)
list3 = sorted(eigVects)

for i in range(len(list1)):
  if list1[i][1] == eigVects[i][1]:
    count1 = count1 + 1
if count1 == len(list1):
  print('\nThe given matrix is diagonalizable')
  P,D = mat.diagonalize() # if diagonal matrix is asked to print
  print(D) # if diagonal matrix is asked to print
else:
  print('\nThe given matrix is not diagonalizable')

# Power method
import numpy as np

def powerMethod(x1):
  mat = np.dot(A,x1)
  v = x1.T
  mat1 = np.dot(v,mat)
  mat2 = np.dot(v,x1)
  res = mat1/mat2
  print(f'The largest Eigen Value: {res}')
  print(f'The largest Eigen Vector: {x1}')


def maxVector(A):
    # Choose a random initial vector
    n = A.shape[0]
    x = np.random.rand(n)
    while True:
        # Multiply A with the vector
        y = np.dot(A, x)
        # Find the largest element of the resulting vector
        eigenvalue = np.max(np.abs(y))
        # Normalize the vector
        x1 = y / eigenvalue
        if np.allclose(x,x1,atol = 0.0001):
          powerMethod(x1)
          break
        else:
          x = x1

A = np.array([[1,0,0],[0,3,-1],[0,-1,3]])
maxVector(A)
# print(np.linalg.eig(A))

# Inverse power method
import numpy as np

def powerMethod(x1):
  mat = np.dot(A,x1)
  v = x1.T
  mat1 = np.dot(v,mat)
  mat2 = np.dot(v,x1)
  res = mat1/mat2
  print(f'The smallest Eigen Value: {res}')
  print(f'The smallest Eigen Vector: {x1}')


def maxVector(A):
    # Choose a random initial vector
    n = A.shape[0]
    x = np.random.rand(n)
    while True:
        # Multiply A with the vector
        y = np.dot(A, x)
        # Find the largest element of the resulting vector
        eigenvalue = np.max(np.abs(y))
        # Normalize the vector
        x1 = y / eigenvalue
        if np.allclose(x,x1,atol = 0.0001):
          powerMethod(x1)
          break
        else:
          x = x1

A = np.array([[1,0,0],[0,3,-1],[0,-1,3]])
if np.linalg.det(A) != 0:
  A1 = np.linalg.inv(A)
  maxVector(A1)
else:
  print("\n Inverse Doesnot Exist")